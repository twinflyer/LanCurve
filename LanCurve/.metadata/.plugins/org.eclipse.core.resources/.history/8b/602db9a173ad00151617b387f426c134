package de.lanalda.suff.cuve.client;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;

public class Panel extends Canvas {

	private static final long serialVersionUID = 1L;
	private Client client;
	private BufferedImage bi;

	Graphics graphics = null;
	Graphics2D g2d = null;
	Color background = Color.BLACK;
	private boolean initializedBufferStrategy;

	public Panel(Client client) {
		super();

		this.setIgnoreRepaint(true);

		GraphicsEnvironment ge = GraphicsEnvironment
				.getLocalGraphicsEnvironment();
		GraphicsDevice gd = ge.getDefaultScreenDevice();
		GraphicsConfiguration gc = gd.getDefaultConfiguration();

		this.bi = gc.createCompatibleImage(640, 480);

		this.client = client;
		this.setBackground(Color.black);
	}

	public void draw() {
		if (!this.initializedBufferStrategy) {
			this.createBufferStrategy(2);
			this.initializedBufferStrategy = true;
		}
		g2d = bi.createGraphics();
		g2d.setColor(background);
		g2d.fillRect(0, 0, 639, 479);

		this.drawPlayers();

		graphics = this.getBufferStrategy().getDrawGraphics();

		graphics.drawImage(bi, 0, 0, null);

		if (!this.getBufferStrategy().contentsLost())
			this.getBufferStrategy().show();

		// Let the OS have a little time...
		Thread.yield();

	}

	private void drawPlayers() {
		super.paintComponent(g);
		drawPlayer(this.client.getLocalPlayer(), g);
		for (Player p : this.client.getRemotePlayers()) {
			drawPlayer(p, g);
		}
	}

	// private void drawPlayer(Player player, Graphics g) {
	// g.setColor(Color.WHITE);
	// g.drawOval(player.getPosition().xPos - 5, player.getPosition().yPos-5,
	// 10, 10);
	// }

}
